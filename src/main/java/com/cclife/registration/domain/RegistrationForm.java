/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cclife.registration.domain;

/**
 *
 * @author CH1CHOO1
 */
import ws.cccm.application.model.*;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import javax.persistence.Column;
import javax.persistence.Temporal;
import org.apache.log4j.Logger;
import org.springframework.binding.message.MessageBuilder;
import org.springframework.binding.message.MessageContext;
import org.springframework.binding.validation.ValidationContext;
import ws.cccm.application.util.DateUtil;

/**
 * Object mapping for hibernate-handled table: registrationdata.
 *
 * @author autogenerated
 */
public class RegistrationForm extends BaseObject {

    private static final Logger logger = Logger.getLogger(RegistrationForm.class);
    /**
     * Serial Version UID.
     */
    private static final long serialVersionUID = -558954559L;

    private Long formID;

    private Family address = new Family();
    private ArrayList<Registrant> registrants = new ArrayList<Registrant>();
    private Long churchID;
    private String churchName;
    private String churchCity;
    private String churchState;
    private String coordinator;

    private Date registrationDate;
    private String Remarks;
    private Boolean Misc1;
    private Boolean Misc2;
    private Payment payment;
    private String discountCode;
    private Integer eventID;
    private Fee expense;
        
        
    private List<LabelValue> ageGroup;
    private List<LabelValue> countries;
    private List<LabelValue> relationshipGroup;
    private List<LabelValue> statusGroup;
    private List<LabelValue> statusGroup2;
    private List<LabelValue> stateList;


    /**
     * Default constructor, mainly for hibernate use.
     */
    public RegistrationForm() {
        // Default constructor
    }

    public void initialize() {

        logger.debug("Initialize Form...");

        try {
            registrationDate = DateUtil.getToday().getTime();
        } catch (ParseException ex) {
            java.util.logging.Logger.getLogger(RegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        logger.debug("Exit initialize Form...");
    }

    public void validateStart(ValidationContext context) {
        logger.debug("Validate start state...");

        MessageContext messages = context.getMessageContext();
        if (this.getChurchID() <= 0L) {
            messages.addMessage(new MessageBuilder().error().source("churchID").
                    defaultText("Church information is required").build());
        }

        logger.debug("Exit start state...");
    }

//    public void validateRegistrationGrace(ValidationContext context) {
//
//        logger.debug("Validate main state...");
//
//        MessageContext messages = context.getMessageContext();
//
//        if (homeStreetAddress.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homeStreetAddress").
//                    defaultText("Street name is required").build());
//        } else if (homeCity.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homeCity").
//                    defaultText("City is required").build());
//        } else if (homeState.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homeState").
//                    defaultText("State is required").build());
//        } else if (homeZipCode.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homeZipCode").
//                    defaultText("Zipcode is required").build());
//        } else if (homePhone.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homePhone").
//                    defaultText("Phone is required").build());
//        } else if (email.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("email").
//                    defaultText("Your email is required").build());
//        } else if (!InternetUtil.isValidEmailAddress(email)) {
//            messages.addMessage(new MessageBuilder().error().source("email").
//                    defaultText("You have enter invalid email").build());
//        } else if (emailConfirm != null && emailConfirm.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("emailConfirm").
//                    defaultText("Please reenter email for confirmation").build());
//        } else if (!email.equalsIgnoreCase(emailConfirm)) {
//            messages.addMessage(new MessageBuilder().error().source("emailConfirm").
//                    defaultText("The emails you entered do not match").build());
//        }
//
//        int rowCount = 0;
//
//        if (verifyRegistrationTableVariable2(messages, this.getFirstName(), this.getLastName(), this.getGender(), this.getAge(), this.getStatus(), this.getLanguage(), this.getEmail1(), 1)) {
//            rowCount++;
//        }
//
//        if (verifyRegistrationTableVariable2(messages, this.getFirstName2(), this.getLastName2(), this.getGender2(), this.getAge2(), this.getStatus2(), this.getLanguage2(), this.getEmail2(), 2)) {
//            rowCount++;
//        }
//
//        if (verifyRegistrationTableVariable2(messages, this.getFirstName3(), this.getLastName3(), this.getGender3(), this.getAge3(), this.getStatus3(), this.getLanguage3(), this.getEmail3(), 3)) {
//            rowCount++;
//        }
//
//        if (verifyRegistrationTableVariable2(messages, this.getFirstName4(), this.getLastName4(), this.getGender4(), this.getAge4(), this.getStatus4(), this.getLanguage4(), this.getEmail4(), 4)) {
//            rowCount++;
//        }
//
//        if (verifyRegistrationTableVariable2(messages, this.getFirstName5(), this.getLastName5(), this.getGender5(), this.getAge5(), this.getStatus5(), this.getLanguage5(), this.getEmail5(), 5)) {
//            rowCount++;
//        }
//
//        if (verifyRegistrationTableVariable2(messages, this.getFirstName6(), this.getLastName6(), this.getGender6(), this.getAge6(), this.getStatus6(), this.getLanguage6(), this.getEmail6(), 6)) {
//            rowCount++;
//        }
//
//        if (rowCount == 0) {
//            messages.addMessage(new MessageBuilder().error().source("firstName").
//                    defaultText("Registration information is not filled").build());
//        }
//
//    }
//    public void validateMain(ValidationContext context) {
//
//        logger.debug("Validate main state...");
//
//        MessageContext messages = context.getMessageContext();
//
//        if (homeStreetAddress.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homeStreetAddress").
//                    defaultText("Street name is required").build());
//        } else if (homeCity.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homeCity").
//                    defaultText("City is required").build());
//        } else if (homeState.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homeState").
//                    defaultText("State is required").build());
//        } else if (homeZipCode.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homeZipCode").
//                    defaultText("Zipcode is required").build());
//        } else if (homePhone.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homePhone").
//                    defaultText("Phone is required").build());
//        } else if (email.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("email").
//                    defaultText("Your email is required").build());
//        } else if (!InternetUtil.isValidEmailAddress(email)) {
//            messages.addMessage(new MessageBuilder().error().source("email").
//                    defaultText("You have enter invalid email").build());
//        } else if (emailConfirm != null && emailConfirm.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("emailConfirm").
//                    defaultText("Please reenter email for confirmation").build());
//        } else if (!email.equalsIgnoreCase(emailConfirm)) {
//            messages.addMessage(new MessageBuilder().error().source("emailConfirm").
//                    defaultText("The emails you entered do not match").build());
//        }
//
//        int rowCount = 0;
//
//        if (verifyRegistrationTableVariable1(messages, this.getFirstName(), this.getLastName(), this.getGender(), this.getAge(), this.getStatus(), this.getLanguage(), this.getFaith(), 1)) {
//            rowCount++;
//        }
//
//        if (verifyRegistrationTableVariable1(messages, this.getFirstName2(), this.getLastName2(), this.getGender2(), this.getAge2(), this.getStatus2(), this.getLanguage2(), this.getFaith2(), 2)) {
//            rowCount++;
//        }
//
//        if (verifyRegistrationTableVariable1(messages, this.getFirstName3(), this.getLastName3(), this.getGender3(), this.getAge3(), this.getStatus3(), this.getLanguage3(), this.getFaith3(), 3)) {
//            rowCount++;
//        }
//
//        if (verifyRegistrationTableVariable1(messages, this.getFirstName4(), this.getLastName4(), this.getGender4(), this.getAge4(), this.getStatus4(), this.getLanguage4(), this.getFaith4(), 4)) {
//            rowCount++;
//        }
//
//        if (verifyRegistrationTableVariable1(messages, this.getFirstName5(), this.getLastName5(), this.getGender5(), this.getAge5(), this.getStatus5(), this.getLanguage5(), this.getFaith5(), 5)) {
//            rowCount++;
//        }
//
//        if (verifyRegistrationTableVariable1(messages, this.getFirstName6(), this.getLastName6(), this.getGender6(), this.getAge6(), this.getStatus6(), this.getLanguage6(), this.getFaith6(), 6)) {
//            rowCount++;
//        }
//
//        if (rowCount == 0) {
//            messages.addMessage(new MessageBuilder().error().source("firstName").
//                    defaultText("Registration information is not filled").build());
//        }
//
//        logger.debug(
//                "Exit main state...");
//
//    }
    private boolean verifyRegistrationTableVariable1(MessageContext messages, String firstName, String lastName, String gender, String age, String status, String language, Faith faith, Integer rowNum) {

        String row = rowNum == 1 ? "" : String.valueOf(rowNum);
        logger.debug("Faith:[" + faith + "]");
        if ((firstName == null || firstName.length() <= 0)
                && (lastName == null || lastName.length() <= 0)) {
        } else {
            if (firstName != null && firstName.isEmpty()) {
                messages.addMessage(new MessageBuilder().error().source("firstName" + row).
                        defaultText("First name is required").build());
            } else if (lastName != null && lastName.isEmpty()) {
                messages.addMessage(new MessageBuilder().error().source("lastName" + row).
                        defaultText("Last name is required").build());
            } else if (gender == null || gender.isEmpty()) {
                messages.addMessage(new MessageBuilder().error().source("gender" + row).
                        defaultText("Gender is required").build());
            } else if (age != null && age.isEmpty()) {
                messages.addMessage(new MessageBuilder().error().source("age" + row).
                        defaultText("Age is required").build());
            } else if (status != null && status.isEmpty()) {
                messages.addMessage(new MessageBuilder().error().source("status" + row).
                        defaultText("Status is required").build());
            } else if (language != null && language.isEmpty()) {
                messages.addMessage(new MessageBuilder().error().source("language" + row).
                        defaultText("Please select which event you will attend").build());
            } else if (faith == null) {
                messages.addMessage(new MessageBuilder().error().source("faith" + row).
                        defaultText("Please provide your faith status").build());
            }

            // It is verified
            return true;
        }
        // Does not meet condition, it is not verified
        return false;
    }

    private boolean verifyRegistrationTableVariable2(MessageContext messages, String firstName, String lastName, String gender, String age, String status, String language, String email, Integer rowNum) {

        String row = rowNum == 1 ? "" : String.valueOf(rowNum);

        if ((firstName == null || firstName.length() <= 0)
                && (lastName == null || lastName.length() <= 0)) {
        } else {
            if (firstName != null && firstName.isEmpty()) {
                messages.addMessage(new MessageBuilder().error().source("firstName" + row).
                        defaultText("First name is required").build());
            } else if (lastName != null && lastName.isEmpty()) {
                messages.addMessage(new MessageBuilder().error().source("lastName" + row).
                        defaultText("Last name is required").build());
            } else if (gender == null || gender.isEmpty()) {
                messages.addMessage(new MessageBuilder().error().source("gender" + row).
                        defaultText("Gender is required").build());
            } else if (age != null && age.isEmpty()) {
                messages.addMessage(new MessageBuilder().error().source("age" + row).
                        defaultText("Age is required").build());
            } else if (status != null && status.isEmpty()) {
                messages.addMessage(new MessageBuilder().error().source("status" + row).
                        defaultText("Status is required").build());
            } else if (language != null && language.isEmpty()) {
                messages.addMessage(new MessageBuilder().error().source("language" + row).
                        defaultText("Please select which event you will attend").build());
            } else if (email != null && email.isEmpty() && (language != null && language.contentEquals("E"))) {
                if (row.isEmpty()) {
                    row = "1";
                }
                messages.addMessage(new MessageBuilder().error().source("email" + row).
                        defaultText("Please provide your email for GRACE communication").build());
            }

            // It is verified
            return true;
        }

        // Does not meet condition, it is not verified
        return false;
    }

    public void validateMain1(ValidationContext context) {

        logger.debug("Validate main state...");

        MessageContext messages = context.getMessageContext();

//        messages.addMessage(new MessageBuilder().error().source("username").
//                    code("account.username.required").build());
//        if ((this.getFirstName() != null && this.getFirstName().isEmpty())
//                && (this.getLastName() != null && this.getLastName().isEmpty())
//                && (this.getFirstName2() != null && this.getFirstName2().isEmpty())
//                && (this.getLastName2() != null && this.getLastName2().isEmpty())
//                && (this.getFirstName3() != null && this.getFirstName3().isEmpty())
//                && (this.getLastName3() != null && this.getLastName3().isEmpty())
//                && (this.getFirstName4() != null && this.getFirstName4().isEmpty())
//                && (this.getLastName4() != null && this.getLastName4().isEmpty())
//                && (this.getFirstName5() != null && this.getFirstName5().isEmpty())
//                && (this.getLastName5() != null && this.getLastName5().isEmpty())
//                && (this.getFirstName6() != null && this.getFirstName6().isEmpty())
//                && (this.getLastName6() != null && this.getLastName6().isEmpty())
//                ) {
//            messages.addMessage(new MessageBuilder().error().source("personal").
//                    defaultText("Registration personal information is not filled").build());
//        } else {
//
//            if ((this.getFirstName() != null && this.getFirstName().length() > 0)
//                    && (this.getLastName() != null && this.getLastName().length() > 0)
//                    && ((this.getAge() != null && this.getAge().isEmpty())
//                    || (this.getGender() != null && this.getGender().isEmpty())
//                    || (this.getStatus() != null && this.getStatus().isEmpty()))) {
//                messages.addMessage(new MessageBuilder().error().source("firstName").
//                        defaultText("Personal information is not completed").build());
//            }
//            if ((this.getFirstName2() != null && this.getFirstName2().length() > 0)
//                    && (this.getLastName2() != null && this.getLastName2().length() > 0)
//                    && ((this.getAge2() != null && this.getAge2().isEmpty())
//                    || (this.getGender2() != null && this.getGender2().isEmpty())
//                    || (this.getStatus2() != null && this.getStatus2().isEmpty()))) {
//                messages.addMessage(new MessageBuilder().error().source("firstName2").
//                        defaultText("Personal information row 2 is not completed").build());
//            }
//
//            if ((this.getFirstName3() != null && this.getFirstName3().length() > 0)
//                    && (this.getLastName3() != null && this.getLastName3().length() > 0)
//                    && ((this.getAge3() != null && this.getAge3().isEmpty())
//                    || (this.getGender3() != null && this.getGender3().isEmpty())
//                    || (this.getStatus3() != null && this.getStatus3().isEmpty()))) {
//                messages.addMessage(new MessageBuilder().error().source("firstName3").
//                        defaultText("Personal information row 3 is not completed").build());
//            }
//
//            if ((this.getFirstName4() != null && this.getFirstName4().length() > 0)
//                    && (this.getLastName4() != null && this.getLastName4().length() > 0)
//                    && ((this.getAge4() != null && this.getAge4().isEmpty())
//                    || (this.getGender4() != null && this.getGender4().isEmpty())
//                    || (this.getStatus4() != null && this.getStatus4().isEmpty()))) {
//                messages.addMessage(new MessageBuilder().error().source("firstName4").
//                        defaultText("Personal information row 4 is not completed").build());
//            }
//
//            if ((this.getFirstName5() != null && this.getFirstName5().length() > 0)
//                    && (this.getLastName5() != null && this.getLastName5().length() > 0)
//                    && ((this.getAge5() != null && this.getAge5().isEmpty())
//                    || (this.getGender5() != null && this.getGender5().isEmpty())
//                    || (this.getStatus5() != null && this.getStatus5().isEmpty()))) {
//                messages.addMessage(new MessageBuilder().error().source("firstName5").
//                        defaultText("Personal information row 5 is not completed").build());
//            }
//
//            if ((this.getFirstName6() != null && this.getFirstName6().length() > 0)
//                    && (this.getLastName6() != null && this.getLastName6().length() > 0)
//                    && ((this.getAge6() != null && this.getAge6().isEmpty())
//                    || (this.getGender6() != null && this.getGender6().isEmpty())
//                    || (this.getStatus6() != null && this.getStatus6().isEmpty()))) {
//                messages.addMessage(new MessageBuilder().error().source("firstName6").
//                        defaultText("Personal information row 6 is not completed").build());
//            }
//        }
//        if (churchID.intValue() <= 0) {
//            messages.addMessage(new MessageBuilder().error().source("churchID").
//                    defaultText("Church is required").build());
//        } else if (chineseName != null && chineseName.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("chineseName").
//                    defaultText("Your Chinese name is required").build());
//        } else if (firstName.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("firstName").
//                    defaultText("Your first name is required").build());
//        } else if (lastName.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("lastName").
//                    defaultText("Your last name is required").build());
//        } else if (faith == Faith.BELIEVER && faithYear == null) {
//            messages.addMessage(new MessageBuilder().error().source("faithYear").
//                    defaultText("Your faith year is required").build());
//        } else if (faith == Faith.BELIEVER && (faithYear == null || faithYear.intValue() <= 0 || faithYear.intValue() > 100)) {
//            messages.addMessage(new MessageBuilder().error().source("faithYear").
//                    defaultText("Your faith year is not valid").build());
//        } else if (homeStreetAddress.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homeStreetAddress").
//                    defaultText("Your address is required").build());
//        } else if (homeCity.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homeCity").
//                    defaultText("Your city is required").build());
//        } else if (homeState.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homeState").
//                    defaultText("Your state is required").build());
//        } else if (homeZipCode.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homeZipCode").
//                    defaultText("Your zip is required").build());
//        } else if (homePhone.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("homePhone").
//                    defaultText("Home Phone is required").build());
//        } else if (email.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("email").
//                    defaultText("Your valid email is required").build());
//        } else if (!InternetUtil.isValidEmailAddress(email)) {
//            messages.addMessage(new MessageBuilder().error().source("email").
//                    defaultText("You have enter invalid email").build());
//        }
    }

//    public void validateConsent(ValidationContext context) {
//
//        logger.debug("Validate consent state..[" + guardianFullName + "]");
//
//        MessageContext messages = context.getMessageContext();
//
//        if (guardianFullName != null && guardianFullName.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("guardianFullName").
//                    defaultText("The Name of guardian is required").build());
//        }
//
//        if (guardianPhoneNumber != null && guardianPhoneNumber.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("guardianPhoneNumber").
//                    defaultText("The phone number is required").build());
//        } else if (guardianPhoneNumberConfirm != null && guardianPhoneNumberConfirm.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("guardianPhoneNumberConfirm").
//                    defaultText("Please reenter phone number for confirmation").build());
//        } else if (!guardianPhoneNumber.equalsIgnoreCase(guardianPhoneNumberConfirm)) {
//            messages.addMessage(new MessageBuilder().error().source("guardianPhoneNumberConfirm").
//                    defaultText("The phone numbers you entered do not match").build());
//        }
//
//        if (guardianEmail != null && guardianEmail.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("guardianEmail").
//                    defaultText("The email is required").build());
//        } else if (!InternetUtil.isValidEmailAddress(guardianEmail)) {
//            messages.addMessage(new MessageBuilder().error().source("guardianEmail").
//                    defaultText("You have enter invalid email").build());
//        } else if (guardianEmailConfirm != null && guardianEmailConfirm.isEmpty()) {
//            messages.addMessage(new MessageBuilder().error().source("guardianEmailConfirm").
//                    defaultText("Please reenter email for confirmation").build());
//        } else if (!guardianEmail.equalsIgnoreCase(guardianEmailConfirm)) {
//            messages.addMessage(new MessageBuilder().error().source("guardianEmailConfirm").
//                    defaultText("The emails you entered do not match").build());
//        }
//    }
    public void validateReview(ValidationContext context) {

//        logger.debug("Validate review1 state..[" + paymentMethod + "]");
        MessageContext messages = context.getMessageContext();

//        if (paymentMethod == null) {
//            messages.addMessage(new MessageBuilder().error().source("paymentMethod").
//                    defaultText("Please select your payment option").build());
//        }
    }

//    public boolean isConsentNeeded() {
//        return (age == null || age.isEmpty() || age.charAt(0) != 'A')
//                && (age2 == null || age2.isEmpty() || age2.charAt(0) != 'A')
//                && (age3 == null || age3.isEmpty() || age3.charAt(0) != 'A')
//                && (age4 == null || age4.isEmpty() || age4.charAt(0) != 'A')
//                && (age5 == null || age5.isEmpty() || age5.charAt(0) != 'A')
//                && (age6 == null || age6.isEmpty() || age6.charAt(0) != 'A');
//    }
//    public void updateFees() {
//
//        try {
////            registrationDate = DateUtil.getToday().getTime();
////            Date now = registrationDate;
////            Date regularRegistrationDate = new GregorianCalendar(2012, Calendar.OCTOBER, 31, 23, 59).getTime();
////            Date lateRegistrationDate = new GregorianCalendar(2012, Calendar.OCTOBER, 30, 23, 59).getTime();
//
////            logger.debug("Registration Date:" + now.toString());
////            logger.debug("Regular Registration Date:" + regularRegistrationDate.toString());
////            logger.debug("Late Registration Date:" + lateRegistrationDate.toString());
////             Meals Fee
//            breakfastTotal = breakfast2 + breakfast3 + breakfast4;
//            totalBreakfastFee = breakfastTotal * 5;
//
//            lunchTotal = lunch2 + lunch3 + lunch4;
//            totalLunchFee = lunchTotal * 5;
//
//            dinnerTotal = dinner1 + dinner2 + dinner3;
//            totalDinnerFee = dinnerTotal * 8;
//
//            totalMealsFee = totalBreakfastFee + totalLunchFee + totalDinnerFee;
//
//            // Registration Fee
//            adultTotal = 0;
//            childrenTotal = 0;
//            babyTotal = 0;
//
//            if (verifyEligibleAgePerRow(chineseName, firstName, lastName, age)) {
//                if (age.charAt(0) == 'A') {
//                    adultTotal = adultTotal + 1;
//                } else if (Integer.valueOf(age) >= 4) {
//                    childrenTotal = childrenTotal + 1;
//                } else {
//                    babyTotal = babyTotal + 1;
//                }
//            } else {
//                firstName = "";
//                lastName = "";
//                age = "";
//                gender = "";
//                status = "";
//            }
//
//            if (verifyEligibleAgePerRow(chineseName2, firstName2, lastName2, age2)) {
//                if (age2.charAt(0) == 'A') {
//                    adultTotal = adultTotal + 1;
//                } else if (Integer.valueOf(age2) >= 4) {
//                    childrenTotal = childrenTotal + 1;
//                } else {
//                    babyTotal = babyTotal + 1;
//                }
//            } else {
//                firstName2 = "";
//                lastName2 = "";
//                age2 = "";
//                gender2 = "";
//                status2 = "";
//            }
//
//            if (verifyEligibleAgePerRow(chineseName3, firstName3, lastName3, age3)) {
//                if (age3.charAt(0) == 'A') {
//                    adultTotal = adultTotal + 1;
//                } else if (Integer.valueOf(age3) >= 4) {
//                    childrenTotal = childrenTotal + 1;
//                } else {
//                    babyTotal = babyTotal + 1;
//                }
//            } else {
//                firstName3 = "";
//                lastName3 = "";
//                age3 = "";
//                gender3 = "";
//                status3 = "";
//            }
//
//            if (verifyEligibleAgePerRow(chineseName4, firstName4, lastName4, age4)) {
//                if (age4.charAt(0) == 'A') {
//                    adultTotal = adultTotal + 1;
//                } else if (Integer.valueOf(age4) >= 4) {
//                    childrenTotal = childrenTotal + 1;
//                } else {
//                    babyTotal = babyTotal + 1;
//                }
//            } else {
//                firstName4 = "";
//                lastName4 = "";
//                age4 = "";
//                gender4 = "";
//                status4 = "";
//            }
//
//            if (verifyEligibleAgePerRow(chineseName5, firstName5, lastName5, age5)) {
//                if (age5.charAt(0) == 'A') {
//                    adultTotal = adultTotal + 1;
//                } else if (Integer.valueOf(age5) >= 4) {
//                    childrenTotal = childrenTotal + 1;
//                } else {
//                    babyTotal = babyTotal + 1;
//                }
//            } else {
//                firstName5 = "";
//                lastName5 = "";
//                age5 = "";
//                gender5 = "";
//                status5 = "";
//            }
//
//            if (verifyEligibleAgePerRow(chineseName6, firstName6, lastName6, age6)) {
//                if (age6.charAt(0) == 'A') {
//                    adultTotal = adultTotal + 1;
//                } else if (Integer.valueOf(age6) >= 4) {
//                    childrenTotal = childrenTotal + 1;
//                } else {
//                    babyTotal = babyTotal + 1;
//                }
//            } else {
//                firstName6 = "";
//                lastName6 = "";
//                age6 = "";
//                gender6 = "";
//                status6 = "";
//            }
//
////            if (discountCode != null && discountCode.equalsIgnoreCase("cccm11")) {
////                adultRegistrationFee = 40;
////                nonAdultRegistrationFee = 20;
////            } else {
//            adultRegistrationFee = RegistrationUtil.getAdultRegistrationFee(registrationDate).intValue();
//            nonAdultRegistrationFee = RegistrationUtil.getNonAdultRegistrationFee(registrationDate).intValue();
////            }
//
//            totalAdultRegistrationFee = adultTotal * adultRegistrationFee;
//            totalChildrenRegistrationFee = childrenTotal * nonAdultRegistrationFee;
//            totalRegistrationFee = totalAdultRegistrationFee + totalChildrenRegistrationFee;
//
//            grandTotal = totalRegistrationFee + totalMealsFee;
//
//        } catch (NullPointerException ex) {
//            logger.error("updateFees Error:" + ex.getMessage());
//            ex.printStackTrace();
//        }
//    }
    private boolean verifyEligibleAgePerRow(String cn, String firstName, String lastName, String a) {

        try {
            if (((firstName.length() > 0)
                    && (lastName.length() > 0))
                    || (cn.length() > 0)) {

                if (a.isEmpty()) {
                    return false;
                }

            } else {
                return false;
            }
        } catch (NullPointerException ex) {
            return false;
        }

        return true;
    }

    /**
     * Return the value associated with the column: Remarks.
     *
     * @return A String object (this.Remarks)
     */
    @Column(length = 255)
    public String getRemarks() {
        return this.Remarks;
    }

    /**
     * Set the value related to the column: Remarks.
     *
     * @param Remarks the Remarks value you wish to set
     */
    public void setRemarks(final String Remarks) {
        this.Remarks = Remarks;
    }

    /**
     * Return the value associated with the column: churchCity.
     *
     * @return A String object (this.churchCity)
     */
    @Column(length = 50)
    public String getChurchCity() {
        return this.churchCity;
    }

    /**
     * Set the value related to the column: churchCity.
     *
     * @param churchCity the churchCity value you wish to set
     */
    public void setChurchCity(String ChurchCity) {
        this.churchCity = ChurchCity;
    }

    /**
     * Return the value associated with the column: churchID.
     *
     * @return A Double object (this.churchID)
     */
    public Long getChurchID() {
        return this.churchID;
    }

    /**
     * Set the value related to the column: churchID.
     *
     * @param churchID the churchID value you wish to set
     */
    public void setChurchID(Long ChurchID) {
        this.churchID = ChurchID;
    }

    /**
     * Return the value associated with the column: churchState.
     *
     * @return A String object (this.churchState)
     */
    @Column(length = 50)
    public String getChurchState() {
        return this.churchState;
    }

    /**
     * Set the value related to the column: churchState.
     *
     * @param churchState the churchState value you wish to set
     */
    public void setChurchState(String ChurchState) {
        this.churchState = ChurchState;
    }

    /**
     * Return the value associated with the column: coordinator.
     *
     * @return A String object (this.coordinator)
     */
    @Column(length = 50)
    public String getCoordinator() {
        return this.coordinator;
    }

    /**
     * Set the value related to the column: coordinator.
     *
     * @param coordinator the coordinator value you wish to set
     */
    public void setCoordinator(String Coordinator) {
        this.coordinator = Coordinator;
    }

    /**
     * Return the value associated with the column: formID.
     *
     * @return A Double object (this.formID)
     */
    public Long getFormID() {
        return this.formID;
    }

    /**
     * Set the value related to the column: formID.
     *
     * @param formID the formID value you wish to set
     */
    public void setFormID(Long FormID) {
        this.formID = FormID;
    }

    /**
     * Return the value associated with the column: registrationDate.
     *
     * @return A Date object (this.registrationDate)
     */
    @Temporal(javax.persistence.TemporalType.DATE)
    public Date getRegistrationDate() {
        return this.registrationDate;
    }

    /**
     * Set the value related to the column: registrationDate.
     *
     * @param registrationDate the registrationDate value you wish to set
     */
    public void setRegistrationDate(Date RegistrationDate) {
        this.registrationDate = RegistrationDate;
    }

    /**
     * Deep copy.
     *
     * @return cloned object
     * @throws CloneNotSupportedException on error
     */
    public RegistrationForm clone() throws CloneNotSupportedException {
        
        super.clone();  // keep hierarchy
        RegistrationForm copy = new RegistrationForm();
        copy.setChurchCity(this.getChurchCity());
        copy.setChurchID(this.getChurchID());
        copy.setChurchState(this.getChurchState());
        copy.setCoordinator(this.getCoordinator());
        copy.setFormID(this.getFormID());
        copy.setRegistrationDate(this.getRegistrationDate());
        copy.setRemarks(this.getRemarks());

        return copy;
    }

    /**
     * Provides toString implementation.
     *
     * @see java.lang.Object#toString()
     * @return String representation of this class.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("Remarks: ").append(this.Remarks).append(", ");
        sb.append("ChurchCity: ").append(this.churchCity).append(", ");
        sb.append("ChurchID: ").append(this.churchID).append(", ");
        sb.append("ChurchState: ").append(this.churchState).append(", ");
        sb.append("Coordinator: ").append(this.coordinator).append(", ");
        sb.append("RegistrationDate: ").append(this.registrationDate).append(", ");
        sb.append("Remarks: ").append(this.Remarks).append(", ");

        return sb.toString();
    }

    /**
     * Equals implementation.
     *
     * @see java.lang.Object#equals(java.lang.Object)
     * @param aThat Object to compare with
     * @return true/false
     */
    @Override
    public boolean equals(Object aThat) {
        if (this == aThat) {
            return true;
        }
        if ((aThat == null) || (!(aThat instanceof RegistrationForm))) {
            return false;
        }
        RegistrationForm that = (RegistrationForm) aThat;

        return ((((this.Remarks == null) && (that.Remarks == null)) || (this.Remarks != null && this.Remarks.equals(that.Remarks)))
                && (((this.churchCity == null) && (that.churchCity == null)) || (this.churchCity != null && this.churchCity.equals(that.churchCity)))
                && (((this.churchID == null) && (that.churchID == null)) || (this.churchID != null && this.churchID.equals(that.churchID)))
                && (((this.churchState == null) && (that.churchState == null)) || (this.churchState != null && this.churchState.equals(that.churchState)))
                && (((this.coordinator == null) && (that.coordinator == null)) || (this.coordinator != null && this.coordinator.equals(that.coordinator)))
                && (((this.registrationDate == null) && (that.registrationDate == null)) || (this.registrationDate != null && this.registrationDate.equals(that.registrationDate))));
    }

    /**
     * Calculate the hashcode.
     *
     * @see java.lang.Object#hashCode()
     * @return a calculated number
     */
    public int hashCode() {
        int result = 0;
        result = 1000003 * result + (this.Remarks == null ? 0 : this.Remarks.hashCode());
        result = 1000003 * result + (this.churchCity == null ? 0 : this.churchCity.hashCode());
        result = 1000003 * result + (this.churchID == null ? 0 : this.churchID.hashCode());
        result = 1000003 * result + (this.churchState == null ? 0 : this.churchState.hashCode());
        result = 1000003 * result + (this.coordinator == null ? 0 : this.coordinator.hashCode());
        result = 1000003 * result + (this.formID == null ? 0 : this.formID.hashCode());
        result = 1000003 * result + (this.registrationDate == null ? 0 : this.registrationDate.hashCode());
        result = 1000003 * result + (this.Remarks == null ? 0 : this.Remarks.hashCode());

        return result;
    }

    public String getChurchName() {
        return churchName;
    }

    public void setChurchName(String ChurchName) {
        this.churchName = ChurchName;
    }

    public Boolean getMisc1() {
        return Misc1;
    }

    public void setMisc1(Boolean Misc1) {
        this.Misc1 = Misc1;
    }

    public Boolean getMisc2() {
        return Misc2;
    }

    public void setMisc2(Boolean Misc2) {
        this.Misc2 = Misc2;
    }

    /**
     * @return the ageGroup
     */
    public List<LabelValue> getAgeGroup() {
        return ageGroup;
    }

    /**
     * @param ageGroup the ageGroup to set
     */
    public void setAgeGroup(List<LabelValue> ageGroup) {
        this.ageGroup = ageGroup;
    }

    /**
     * @return the discountCode
     */
    public String getDiscountCode() {
        return discountCode;
    }

    /**
     * @param discountCode the discountCode to set
     */
    public void setDiscountCode(String discountCode) {
        this.discountCode = discountCode;
    }

    /**
     * @return the eventID
     */
    public Integer getEventID() {
        return eventID;
    }

    /**
     * @param eventID the eventID to set
     */
    public void setEventID(Integer eventID) {
        this.eventID = eventID;
    }

    /**
     * @return the months
     */
    public List<LabelValue> getRelationshipGroup() {
        return relationshipGroup;
    }

    public void setRelationshipGroup(List<LabelValue> relationshipGroup) {
        this.relationshipGroup = relationshipGroup;
    }

    /**
     * @return the statusGroup
     */
    public List<LabelValue> getStatusGroup() {
        return statusGroup;
    }

    /**
     * @param statusGroup the statusGroup to set
     */
    public void setStatusGroup(List<LabelValue> statusGroup) {
        this.statusGroup = statusGroup;
    }

    /**
     * @return the statusGroup2
     */
    public List<LabelValue> getStatusGroup2() {
        return statusGroup2;
    }

    /**
     * @param statusGroup2 the statusGroup2 to set
     */
    public void setStatusGroup2(List<LabelValue> statusGroup2) {
        this.statusGroup2 = statusGroup2;
    }

    /**
     * @return the statesList
     */
    public List<LabelValue> getStateList() {
        return stateList;
    }

    /**
     * @param stateList
     */
    public void setStateList(List<LabelValue> stateList) {
        this.stateList = stateList;
    }

    /**
     * @return the address
     */
    public Family getAddress() {
        return address;
    }

    /**
     * @param address the address to set
     */
    public void setAddress(Family address) {
        this.address = address;
    }

    /**
     * @return the registrants
     */
    public List<Registrant> getRegistrants() {
        return registrants;
    }

    /**
     * @param registrants the registrants to set
     */
    public void setRegistrants(ArrayList<Registrant> registrants) {
        this.registrants = registrants;
    }

    /**
     * @return the payment
     */
    public Payment getPayment() {
        return payment;
    }

    /**
     * @param payment the payment to set
     */
    public void setPayment(Payment payment) {
        this.payment = payment;
    }

    /**
     * @return the expense
     */
    public Fee getExpense() {
        return expense;
    }

    /**
     * @param expense the expense to set
     */
    public void setExpense(Fee expense) {
        this.expense = expense;
    }

    /**
     * @return the countries
     */
    public List<LabelValue> getCountries() {
        return countries;
    }

    /**
     * @param countries the countries to set
     */
    public void setCountries(List<LabelValue> countries) {
        this.countries = countries;
    }

}
